// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 8ozBW4uAVqTFB3X2H9YHuB
// Component: KsTMFzra88PP
import * as React from "react";
import Link from "next/link";
import { useRouter } from "next/router";
import {
  PlasmicLink as PlasmicLink__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  useTrigger
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 8ozBW4uAVqTFB3X2H9YHuB/projectcss
import sty from "./PlasmicCategoryBtn.module.css"; // plasmic-import: KsTMFzra88PP/css

createPlasmicElementProxy;

export const PlasmicCategoryBtn__VariantProps = new Array();

export const PlasmicCategoryBtn__ArgProps = new Array("currentItem");

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicCategoryBtn__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );
  const $props = {
    ...args,
    ...variants
  };
  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const [isCategoryBtnHover, triggerCategoryBtnHoverProps] = useTrigger(
    "useHover",
    {}
  );
  const triggers = {
    hover_categoryBtn: isCategoryBtnHover
  };
  return (
    <PlasmicLink__
      data-plasmic-name={"categoryBtn"}
      data-plasmic-override={overrides.categoryBtn}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.a,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        sty.categoryBtn
      )}
      component={Link}
      platform={"nextjs"}
      data-plasmic-trigger-props={[triggerCategoryBtnHoverProps]}
    >
      <div className={classNames(projectcss.all, sty.freeBox__uMa7)}>
        <h1
          data-plasmic-name={"h1"}
          data-plasmic-override={overrides.h1}
          className={classNames(
            projectcss.all,
            projectcss.h1,
            projectcss.__wab_text,
            sty.h1
          )}
        >
          <React.Fragment>
            {(() => {
              try {
                return $props.currentItem.name;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return "MEN";
                }
                throw e;
              }
            })()}
          </React.Fragment>
        </h1>
        <div className={classNames(projectcss.all, sty.freeBox___3FXGv)} />
      </div>
    </PlasmicLink__>
  );
}

const PlasmicDescendants = {
  categoryBtn: ["categoryBtn", "h1"],
  h1: ["h1"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicCategoryBtn__ArgProps,
          internalVariantPropNames: PlasmicCategoryBtn__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicCategoryBtn__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "categoryBtn") {
    func.displayName = "PlasmicCategoryBtn";
  } else {
    func.displayName = `PlasmicCategoryBtn.${nodeName}`;
  }
  return func;
}

export const PlasmicCategoryBtn = Object.assign(
  // Top-level PlasmicCategoryBtn renders the root element
  makeNodeComponent("categoryBtn"),
  {
    // Helper components rendering sub-elements
    h1: makeNodeComponent("h1"),
    // Metadata about props expected for PlasmicCategoryBtn
    internalVariantProps: PlasmicCategoryBtn__VariantProps,
    internalArgProps: PlasmicCategoryBtn__ArgProps
  }
);

export default PlasmicCategoryBtn;
/* prettier-ignore-end */
